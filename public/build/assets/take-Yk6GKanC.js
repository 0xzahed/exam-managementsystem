class c{constructor(){this.examConfig=window.examConfig,this.timer=null,this.autoSaveTimer=null,this.answers={},this.timeRemaining=0,this.hasUnsavedChanges=!1,this.isSubmitting=!1,this.init()}init(){if(!this.examConfig){console.error("Exam config not found");return}this.calculateTimeRemaining(),this.startTimer(),this.startServerSync(),this.startAutoSave(),this.bindEvents(),this.loadExistingAnswers(),this.setupNavigationWarning()}calculateTimeRemaining(){const e=new Date(this.examConfig.startTime),s=Math.floor((new Date-e)/1e3);this.timeRemaining=Math.max(0,this.examConfig.durationMinutes*60-s)}startServerSync(){this.serverSyncTimer=setInterval(async()=>{try{const e=await fetch(this.examConfig.routes.getTime);if(e.ok){const t=await e.json();if(t.expired){this.autoSubmitExam();return}this.timeRemaining=t.remaining_seconds}}catch(e){console.error("Server sync error:",e)}},3e4)}startTimer(){this.updateTimerDisplay(),this.timer=setInterval(()=>{this.timeRemaining--,this.updateTimerDisplay(),this.timeRemaining<=0&&this.autoSubmitExam(),this.timeRemaining===300&&this.showTimeWarning()},1e3)}updateTimerDisplay(){const e=Math.floor(this.timeRemaining/3600),t=Math.floor(this.timeRemaining%3600/60),s=this.timeRemaining%60,n=`${e.toString().padStart(2,"0")}:${t.toString().padStart(2,"0")}:${s.toString().padStart(2,"0")}`,i=document.getElementById("timer");i&&(i.textContent=n,this.timeRemaining<=300?i.className="font-mono text-lg font-bold text-red-600":this.timeRemaining<=900?i.className="font-mono text-lg font-bold text-yellow-600":i.className="font-mono text-lg font-bold text-green-600")}showTimeWarning(){const e=document.createElement("div");e.className="fixed top-20 right-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4 shadow-lg z-40 max-w-sm",e.innerHTML=`
            <div class="flex">
                <svg class="w-5 h-5 text-yellow-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"/>
                </svg>
                <div>
                    <h4 class="text-yellow-800 font-medium">Time Warning</h4>
                    <p class="text-yellow-700 text-sm mt-1">Only 5 minutes remaining! Please finish your exam soon.</p>
                </div>
            </div>
        `,document.body.appendChild(e),setTimeout(()=>{e.remove()},1e4)}startAutoSave(){this.autoSaveTimer=setInterval(()=>{this.autoSaveAnswers()},this.examConfig.autoSaveInterval)}bindEvents(){console.log("=== BINDING EVENTS ===");let e=document.getElementById("submitExamBtn");e||(e=document.querySelector('[class*="submit"]')||document.querySelector('button[type="submit"]')),console.log("Submit button found:",!!e),console.log("Submit button element:",e),e?(e.removeEventListener("click",this.handleSubmitClick),this.handleSubmitClick=()=>{console.log("Submit button clicked"),this.showSubmitConfirmation()},e.addEventListener("click",this.handleSubmitClick),console.log("Submit button event listener added")):(console.error("Submit button not found! Available buttons:"),console.error(Array.from(document.querySelectorAll("button")).map(n=>({id:n.id,class:n.className,text:n.textContent.trim()}))));let t=document.getElementById("confirmSubmit");t||(t=document.querySelector('[class*="confirm"]')||document.querySelector('button[class*="green"]')),console.log("Confirm button found:",!!t),t&&(t.removeEventListener("click",this.handleConfirmClick),this.handleConfirmClick=()=>{console.log("Confirm submit clicked"),this.submitExam()},t.addEventListener("click",this.handleConfirmClick),console.log("Confirm button event listener added"));let s=document.getElementById("cancelSubmit");s||(s=document.querySelector('[class*="cancel"]')||document.querySelector('button[class*="gray"]')),console.log("Cancel button found:",!!s),s&&(s.removeEventListener("click",this.handleCancelClick),this.handleCancelClick=()=>{console.log("Cancel submit clicked"),this.hideSubmitConfirmation()},s.addEventListener("click",this.handleCancelClick),console.log("Cancel button event listener added")),this.bindAnswerEvents(),console.log("=== EVENTS BOUND ===")}bindAnswerEvents(){document.querySelectorAll('input[type="radio"]').forEach(e=>{e.addEventListener("change",t=>{this.saveAnswer(t.target.dataset.questionId,t.target.value,"mcq")})}),document.querySelectorAll("textarea[data-question-id]").forEach(e=>{e.addEventListener("input",t=>{this.hasUnsavedChanges=!0,this.updateAutoSaveStatus("saving"),clearTimeout(this.saveTimeout),this.saveTimeout=setTimeout(()=>{this.saveAnswer(t.target.dataset.questionId,t.target.value,"short_answer")},1e3)})}),document.querySelectorAll('input[type="file"]').forEach(e=>{e.addEventListener("change",t=>{this.handleFileUpload(t)})})}saveAnswer(e,t,s){this.answers[e]={answer:t,type:s,timestamp:new Date().toISOString()},this.updateAnswerStatus(e,!0),this.updateQuestionNavigation(),this.hasUnsavedChanges=!0}async handleFileUpload(e){const t=e.target.files[0],s=e.target.dataset.questionId;if(!t)return;if(t.size>10*1024*1024){showError("File size must be less than 10MB"),e.target.value="";return}const i=e.target.closest(".question-card").querySelector(".uploaded-file"),o=i.querySelector(".file-name");o.textContent=t.name,i.classList.remove("hidden");const r=new FormData;r.append("file",t),r.append("question_id",s),r.append("_token",document.querySelector('meta[name="csrf-token"]').content);try{const l=await fetch(this.examConfig.routes.saveAnswer,{method:"POST",body:r});if(l.ok){const d=await l.json();this.saveAnswer(s,d.file_info,"file_upload")}else throw new Error("Upload failed")}catch(l){console.error("File upload error:",l),showError("Failed to upload file. Please try again."),i.classList.add("hidden"),e.target.value=""}i.querySelector(".remove-file")?.addEventListener("click",()=>{e.target.value="",i.classList.add("hidden"),delete this.answers[s],this.updateAnswerStatus(s,!1),this.updateQuestionNavigation()})}async autoSaveAnswers(){if(!(!this.hasUnsavedChanges||this.isSubmitting)){this.updateAutoSaveStatus("saving");try{(await fetch(this.examConfig.routes.saveAnswer,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').content},body:JSON.stringify({answers:this.answers,attempt_id:this.examConfig.attemptId})})).ok&&(this.hasUnsavedChanges=!1,this.updateAutoSaveStatus("saved"))}catch(e){console.error("Auto-save error:",e),this.updateAutoSaveStatus("error")}}}updateAutoSaveStatus(e){const t=document.getElementById("autoSaveStatus"),s=t?.querySelector(".saving"),n=t?.querySelector(".saved"),i=t?.querySelector(".error");s?.classList.add("hidden"),n?.classList.add("hidden"),i?.classList.add("hidden"),e==="saving"?s?.classList.remove("hidden"):e==="saved"?n?.classList.remove("hidden"):e==="error"&&i?.classList.remove("hidden"),document.querySelectorAll(".question-card").forEach(o=>{const r=o.querySelector(".auto-save-indicator"),l=r?.querySelector(".saving"),d=r?.querySelector(".saved");e==="saving"?(l?.classList.remove("hidden"),d?.classList.add("hidden")):(l?.classList.add("hidden"),d?.classList.remove("hidden"))})}updateAnswerStatus(e,t){const s=document.querySelector(`[data-question-id="${e}"]`),n=s?.querySelector(".unanswered"),i=s?.querySelector(".answered");t?(n?.classList.add("hidden"),i?.classList.remove("hidden")):(n?.classList.remove("hidden"),i?.classList.add("hidden"))}updateQuestionNavigation(){const e=Object.keys(this.answers).length;document.querySelectorAll(".question-nav-btn").forEach(s=>{const n=s.dataset.questionId;this.answers[n]?(s.classList.remove("border-gray-300","bg-white"),s.classList.add("bg-green-100","border-green-300","text-green-800")):(s.classList.remove("bg-green-100","border-green-300","text-green-800"),s.classList.add("border-gray-300","bg-white"))});const t=document.querySelector(".answered-count");t&&(t.textContent=e)}scrollToQuestion(e){const t=document.querySelectorAll(".question-card");if(t[e]){t[e].scrollIntoView({behavior:"smooth",block:"start"}),document.querySelectorAll(".question-nav-btn").forEach(n=>{n.classList.remove("bg-blue-100","border-blue-300","text-blue-800")});const s=document.querySelector(`[data-question-index="${e}"]`);s&&!this.answers[s.dataset.questionId]&&s.classList.add("bg-blue-100","border-blue-300","text-blue-800")}}reviewAnswers(){window.scrollTo({top:0,behavior:"smooth"});const e=[];document.querySelectorAll(".question-card").forEach((t,s)=>{const n=t.dataset.questionId;this.answers[n]||(e.push(s+1),t.classList.add("ring-2","ring-yellow-300"),setTimeout(()=>{t.classList.remove("ring-2","ring-yellow-300")},3e3))}),e.length>0&&showInfo(`You have ${e.length} unanswered questions: ${e.join(", ")}`)}showSubmitConfirmation(){const e=document.getElementById("submitConfirmation");e&&(e.classList.remove("hidden"),this.updateQuestionNavigation())}hideSubmitConfirmation(){const e=document.getElementById("submitConfirmation");e&&e.classList.add("hidden")}async submitExam(){if(console.log("=== SUBMIT EXAM CALLED ==="),console.log("Is submitting:",this.isSubmitting),this.isSubmitting){console.log("Already submitting, returning");return}this.isSubmitting=!0,console.log("Starting submission process..."),this.hideSubmitConfirmation(),this.timer&&clearInterval(this.timer),this.autoSaveTimer&&clearInterval(this.autoSaveTimer),this.serverSyncTimer&&clearInterval(this.serverSyncTimer),this.showSubmissionOverlay();try{console.log("Preparing submission data...");const e={answers:this.answers,attempt_id:this.examConfig.attemptId,time_spent:Math.max(0,this.examConfig.durationMinutes-Math.floor(this.timeRemaining/60))};console.log("Submission data:",e),console.log("Submit URL:",this.examConfig.routes.submit);const t=document.querySelector('meta[name="csrf-token"]')?.content;if(console.log("CSRF token found:",!!t),!t)throw new Error("CSRF token not found");const s=await fetch(this.examConfig.routes.submit,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":t,Accept:"application/json"},body:JSON.stringify(e)});if(console.log("Response status:",s.status),console.log("Response ok:",s.ok),s.ok){const n=await s.json();console.log("Submission successful:",n),n.redirect_url?(console.log("Redirecting to:",n.redirect_url),window.location.href=n.redirect_url):(console.log("No redirect URL provided, going to exam index"),window.location.href="/student/exams")}else{const n=await s.text();throw console.error("Submission failed with status:",s.status),console.error("Error response:",n),new Error(`Submission failed: ${s.status} - ${n}`)}}catch(e){console.error("=== SUBMISSION ERROR ==="),console.error("Error details:",e),console.error("Error message:",e.message),console.error("Error stack:",e.stack),this.showError("Failed to submit exam: "+e.message+". Please try again."),this.isSubmitting=!1,this.hideSubmissionOverlay(),this.startTimer(),this.startAutoSave(),this.startServerSync()}console.log("=== SUBMIT EXAM COMPLETE ===")}async autoSubmitExam(){clearInterval(this.timer),clearInterval(this.autoSaveTimer),clearInterval(this.serverSyncTimer),this.showSubmissionOverlay("Time is up! Auto-submitting your exam...");try{const e=await fetch(this.examConfig.routes.submit,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').content},body:JSON.stringify({answers:this.answers,attempt_id:this.examConfig.attemptId,time_spent:this.examConfig.durationMinutes,auto_submit:!0})});if(e.ok){const t=await e.json();window.location.href=t.redirect_url}}catch(e){console.error("Auto-submit error:",e)}}showSubmissionOverlay(e="Submitting your exam..."){const t=document.createElement("div");t.id="submissionOverlay",t.className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center",t.innerHTML=`
            <div class="bg-white rounded-xl p-8 text-center max-w-md mx-4">
                <div class="animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">${e}</h3>
                <p class="text-gray-600">Please wait while we process your submission...</p>
            </div>
        `,document.body.appendChild(t)}hideSubmissionOverlay(){const e=document.getElementById("submissionOverlay");e&&e.remove()}showError(e){console.log("Showing error:",e);const t=document.getElementById("errorNotification");t&&t.remove();const s=document.createElement("div");s.id="errorNotification",s.className="fixed top-4 right-4 bg-red-50 border border-red-200 rounded-lg p-4 shadow-lg z-50 max-w-md",s.innerHTML=`
            <div class="flex">
                <svg class="w-5 h-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <div>
                    <h4 class="text-red-800 font-medium">Error</h4>
                    <p class="text-red-700 text-sm mt-1">${e}</p>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-red-400 hover:text-red-600">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
        `,document.body.appendChild(s),setTimeout(()=>{s&&s.parentNode&&s.remove()},1e4)}setupNavigationWarning(){window.addEventListener("beforeunload",i=>{if(this.hasUnsavedChanges&&!this.isSubmitting)return i.preventDefault(),i.returnValue="You have unsaved changes. Are you sure you want to leave?",i.returnValue});const e=document.getElementById("navigationWarning"),t=document.getElementById("stayOnPage"),s=document.getElementById("leavePage");let n=null;document.addEventListener("click",i=>{const o=i.target.closest("a");o&&o.href&&!o.href.includes("#")&&this.hasUnsavedChanges&&!this.isSubmitting&&(i.preventDefault(),n=o.href,e?.classList.remove("hidden"))}),t?.addEventListener("click",()=>{e?.classList.add("hidden"),n=null}),s?.addEventListener("click",()=>{n&&(window.location.href=n)})}loadExistingAnswers(){if(this.examConfig.existingAnswers)for(const[t,s]of Object.entries(this.examConfig.existingAnswers)){this.answers[t]={answer:s.answer,type:s.type,timestamp:new Date().toISOString()};const n=s.type;if(n==="mcq"){const i=document.querySelector(`input[name="question_${t}"][value="${s.answer}"]`);i&&(i.checked=!0)}else if(n==="short_answer"){const i=document.querySelector(`textarea[data-question-id="${t}"]`);i&&(i.value=s.answer)}else if(n==="file_upload"){const o=document.querySelector(`[data-question-id="${t}"]`)?.querySelector(".uploaded-file"),r=o?.querySelector(".file-name");o&&r&&(r.textContent=s.answer||"Previously uploaded file",o.classList.remove("hidden"))}this.updateAnswerStatus(t,!0)}document.querySelectorAll('input[type="radio"]:checked').forEach(t=>{const s=t.dataset.questionId||t.name.replace("question_","");s&&!this.answers[s]&&this.saveAnswer(s,t.value,"mcq")}),document.querySelectorAll("textarea[data-question-id]").forEach(t=>{const s=t.dataset.questionId;t.value.trim()&&s&&!this.answers[s]&&this.saveAnswer(s,t.value,"short_answer")}),document.querySelectorAll('input[type="file"][data-question-id]').forEach(t=>{const s=t.dataset.questionId;t.files.length>0&&s&&!this.answers[s]&&this.saveAnswer(s,"File uploaded","file_upload")}),this.updateQuestionNavigation(),Object.keys(this.answers).length>0&&this.updateAutoSaveStatus("saved")}}document.addEventListener("DOMContentLoaded",function(){if(window.examConfig)try{window.examTaker=new c}catch(a){console.error("Failed to create ExamTaker:",a)}else setTimeout(()=>{if(window.examConfig)try{window.examTaker=new c}catch(a){console.error("Failed to create ExamTaker on retry:",a)}else{const a=document.getElementById("timer");a&&(a.textContent="Error loading timer",a.className="font-mono text-lg font-bold text-red-600")}},1e3)});
